local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

-- Wait for LocalPlayer to ensure it exists
local LocalPlayer = Players.LocalPlayer
while not LocalPlayer do
    task.wait() -- Wait until LocalPlayer is available
    LocalPlayer = Players.LocalPlayer
end

-- Find the Blocks folder
local Blocks = Workspace:FindFirstChild("Blocks")
if not Blocks then
    warn("Blocks folder not found in Workspace!")
    return
end

-- Find the Sockets folder and Remote
local SocketsFolder = ReplicatedStorage:FindFirstChild("Sockets")
if not SocketsFolder then
    warn("Sockets folder not found in ReplicatedStorage!")
    return
end

local Remote = SocketsFolder:FindFirstChild("VyLCd/1Oq0z88WxNzxdUUeeaCpKC7vYSQI8fyxm+YlA=")
if not Remote then
    warn("Remote not found in Sockets folder!")
    return
end

-- Check if a block already has the effects applied
local function hasEffects(block)
    local decal = block:FindFirstChild("effect")
    return decal and decal:IsA("Decal") and decal.Texture == "rbxassetid://10613976227"
end

-- Function to fire a remote
local function fireRemote(command, block, additionalArgs)
    if not block then
        warn("Block is nil!")
        return
    end

    local args = {
        [1] = "effect",
        [2] = block,
        [3] = { [1] = "!effect", [2] = command }
    }

    -- Add additional arguments if provided
    if additionalArgs then
        for _, v in ipairs(additionalArgs) do
            table.insert(args[3], v)
        end
    end

    args[4] = Enum.NormalId.Top
    Remote:FireServer(unpack(args))
end

-- First batch of commands
local function applyFirstBatch(block)
    fireRemote("7756813371", block)
    task.wait(0.05) -- Delay between remotes
    fireRemote("transparency", block, { "1" })
    task.wait(0.05)
    Remote:FireServer({
        [1] = "hidedecals",
        [2] = block
    })
end

-- Second batch of commands
local function applySecondBatch(block)
    fireRemote("speed", block, { "inf" })
    task.wait(0.1) -- Delay between remotes in second batch
    fireRemote("time", block, { "inf" })
    task.wait(0.1)
    fireRemote("spread", block, { "inf" })
    task.wait(0.1)
    fireRemote("amount", block, { "inf" })
end

-- Apply first batch to all blocks with delay and skip blocks with effects
local function applyFirstBatchToAllBlocks()
    for _, block in ipairs(Blocks:GetChildren()) do
        if not hasEffects(block) then
            applyFirstBatch(block)
            task.wait(0.05) -- Delay between blocks
        else
            print("Skipping block: " .. block.Name .. " (effects already applied)")
        end
    end
    print("First batch completed!")
end

-- Apply second batch to all blocks with delay
local function applySecondBatchToAllBlocks()
    for _, block in ipairs(Blocks:GetChildren()) do
        applySecondBatch(block)
    end
    print("Second batch completed!")
end

-- Ensure a decal exists on a block
local function ensureDecal(block)
    local decal = block:FindFirstChild("effect")
    if not decal then
        decal = Instance.new("Decal")
        decal.Name = "effect"
        decal.Texture = "rbxassetid://10613976227"
        decal.Parent = block
        print("Added decal to block: " .. block.Name)
    end
    return decal
end

-- Apply size effect only to blocks with the specific effect
local function awaken()
    for _, block in ipairs(Blocks:GetChildren()) do
        local decal = ensureDecal(block)
        if decal.Texture == "rbxassetid://10613976227" then
            fireRemote("size", block, { "650" })
            task.wait(0.05) -- Delay between blocks
        else
            print("Skipping block: " .. block.Name .. " (decal texture mismatch)")
        end
    end
    print("Awaken completed!")
end

-- Main function to apply both batches
local function createNuke()
    applyFirstBatchToAllBlocks()
    task.wait(0.5) -- Optional delay before starting the second batch
    applySecondBatchToAllBlocks()
    print("Create Nuke completed!")
end

-- GUI Setup
local function CreateGUI()
    local ScreenGui 
