local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local initialSize = Vector2.new(0, 0)
local replayButton
local connection
local isReplaying = false -- Flag to check if replay is in progress
local sizeHandled = false -- Flag to check if the size change has been handled



-- Load JSON data (replace 'your_json_string_here' with your actual JSON data)
local jsonData = [[
[{"Time":1.014055689000088,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.GAME_START.readyButton"},{"Time":7.357759808000083,"Arguments":[{"value":"Players.MATIDPL","__type":"Instance"}],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.dance"},{"Time":7.358056654000393,"Arguments":[{"value":"Players.MATIDPL","__type":"Instance"}],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.dance"},{"Time":14.451785395000116,"Arguments":[],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.mainLoad"},{"Time":14.647039278000193,"Arguments":[],"MethodName":"InvokeServer","RemotePath":"ReplicatedStorage.getPath"},{"Time":14.6795781980004,"Arguments":[],"MethodName":"InvokeServer","RemotePath":"ReplicatedStorage.Event.getTowers"},{"Time":15.370649704000244,"Arguments":[],"MethodName":"InvokeServer","RemotePath":"ReplicatedStorage.getUnitPath"},{"Time":31.65684132200022,"Arguments":["TitanSilver",{"value":[-346.2810974121094,-195.32879638671876,182.9119415283203,1,0,0,0,1,0,0,0,1],"__type":"CFrame"},false],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.placeTower"},{"Time":32.80451569600018,"Arguments":[2],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Game.Speed.Change"},{"Time":32.95795887600025,"Arguments":[3],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Game.Speed.Change"},{"Time":33.128473497000417,"Arguments":[4],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Game.Speed.Change"},{"Time":37.59455110300041,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":44.48143583500041,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":45.63967114900015,"Arguments":["1"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":51.82217458900004,"Arguments":["test",{"value":[-342.3189392089844,-195.32876586914063,199.94415283203126,1,0,0,0,1,0,0,0,1],"__type":"CFrame"},false],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.placeTower"},{"Time":55.50620518800042,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":58.41389972800016,"Arguments":["Speakerwoman",{"value":[-342.0022277832031,-195.32876586914063,202.27207946777345,1,0,0,0,1,0,0,0,1],"__type":"CFrame"},false],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.placeTower"},{"Time":59.27536004600006,"Arguments":["3"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":59.934934285000057,"Arguments":["3"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":60.572077919000097,"Arguments":["3"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":62.484623558000297,"Arguments":["2"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":68.96600023600013,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":73.21216968200042,"Arguments":["2"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":85.87069679200022,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":88.38522125000009,"Arguments":["3"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":95.54678704400021,"Arguments":["test",{"value":[-339.4920349121094,-195.32876586914063,199.41024780273438,1,0,0,0,1,0,0,0,1],"__type":"CFrame"},false],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.placeTower"},{"Time":97.51128253500019,"Arguments":["4"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":98.17413237000028,"Arguments":["4"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":101.06944446100033,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":104.14749322100033,"Arguments":["1"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":119.98996166400002,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":123.4225557890004,"Arguments":["2"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":126.50682500200037,"Arguments":["LargeClock",{"value":[-338.5941467285156,-195.32876586914063,203.45913696289063,1,0,0,0,1,0,0,0,1],"__type":"CFrame"},false],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.placeTower"},{"Time":127.71861597900034,"Arguments":["5"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":128.37010473300007,"Arguments":["5"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":136.85759163800004,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":148.36837285500043,"Arguments":["4"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":150.8548843970002,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":154.53848825000024,"Arguments":["1"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":159.7797407410003,"Arguments":["DJ",{"value":[-345.8569641113281,-195.32876586914063,214.4894256591797,1,0,0,0,1,0,0,0,1],"__type":"CFrame"},false],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.placeTower"},{"Time":161.33188331500015,"Arguments":["6"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":162.10235837300025,"Arguments":["6"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":171.66983970900038,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":174.4527781200004,"Arguments":["2"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":177.1256632980003,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":179.55575558600004,"Arguments":["1"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":183.17735289700023,"Arguments":["6"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":184.78296938200038,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":187.77235563500018,"Arguments":["1"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":191.28972322900018,"Arguments":["4"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":194.27377618900028,"Arguments":["4"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":197.05082532700045,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":199.03363332800019,"Arguments":["5"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":199.7909353770001,"Arguments":["5"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":202.21505874100013,"Arguments":["2"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":204.2963877660004,"Arguments":["2"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":206.11282457400012,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":207.62973297000009,"Arguments":["2"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":210.41515050200042,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":211.39099454100006,"Arguments":["2"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":214.22828060400026,"Arguments":["2"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":217.09883898600038,"Arguments":["4"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":219.91237983600014,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":220.63939959400023,"Arguments":["4"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":222.561079952,"Arguments":["4"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":224.21572278700024,"Arguments":["4"],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.UpgradeTower"},{"Time":231.67185929900007,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":238.8008078060002,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":254.47994538800004,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"},{"Time":282.9230985410004,"Arguments":[true],"MethodName":"FireServer","RemotePath":"ReplicatedStorage.Event.waveSkip"}]
]]

-- Deserialize JSON data
local success, events = pcall(function()
	return HttpService:JSONDecode(jsonData)
end)

if not success then
	warn("Failed to decode JSON data.")
	return
end

local function DeserializeArguments(arguments)
	local deserializedArgs = {}
	for _, arg in ipairs(arguments) do
		if type(arg) == "table" and arg.__type then
			if arg.__type == "Instance" then
				table.insert(deserializedArgs, game:GetService("Workspace"):FindFirstChild(arg.value) or game)
			elseif arg.__type == "Vector3" then
				table.insert(deserializedArgs, Vector3.new(unpack(arg.value)))
			elseif arg.__type == "CFrame" then
				table.insert(deserializedArgs, CFrame.new(unpack(arg.value)))
			elseif arg.__type == "Color3" then
				table.insert(deserializedArgs, Color3.new(unpack(arg.value)))
			elseif arg.__type == "EnumItem" then
				table.insert(deserializedArgs, Enum[arg.value])
			else
				table.insert(deserializedArgs, arg)
			end
		else
			table.insert(deserializedArgs, arg)
		end
	end
	return deserializedArgs
end

local function FindRemote(remotePath)
	local remote = game
	for part in string.gmatch(remotePath, "[^%.]+") do
		remote = remote:FindFirstChild(part)
		if not remote then
			return nil
		end
	end
	return remote
end

local function SafeInvokeServer(remote, args)
	local success, result = pcall(function()
		return remote:InvokeServer(unpack(args))
	end)
	if not success then
		warn("Failed to invoke server:", result)
	end
	return result
end

local function SafeFireServer(remote, args)
	local success, result = pcall(function()
		remote:FireServer(unpack(args))
	end)
	if not success then
		warn("Failed to fire server:", result)
	end
end

local function ReplayRemoteEvents(events)
	for i, event in ipairs(events) do
		local remote = FindRemote(event.RemotePath)
		if remote then
			local methodName = event.MethodName
			local args = DeserializeArguments(event.Arguments)

			print(string.format("Attempting to fire remote: %s, Method: %s, Args: %s", remote:GetFullName(), methodName, HttpService:JSONEncode(args)))

			if methodName == "FireServer" then
				SafeFireServer(remote, args)
			elseif methodName == "InvokeServer" then
				local result = SafeInvokeServer(remote, args)
				if not result then
					warn("Invocation failed for remote: ", remote:GetFullName())
				else
					print("Invocation result: ", result)
				end
			end

			-- Wait for the original delay between events
			if i < #events then
				local delay = events[i + 1].Time - event.Time
				local startTime = tick()
				while tick() - startTime < delay do
					wait(0.1)
				end
			end
		else
			warn("Remote not found:", event.RemotePath)
		end
	end
end

local function StartReplay()
	if isReplaying then
		print("Replay already in progress, exiting StartReplay.")
		return -- Exit if replay is already in progress
	end
	isReplaying = true -- Set the replay flag
	print("Starting replay...")

	-- Fire ReplayCore remote
	ReplicatedStorage:WaitForChild("Event"):WaitForChild("ReplayCore"):FireServer()

	-- Wait 2 seconds before firing readyButton remote
	wait(2)

	-- Check if GAME_START and readyButton exist
	local gameStart = ReplicatedStorage:FindFirstChild("GAME_START")
	if gameStart then
		local readyButton = gameStart:FindFirstChild("readyButton")
		if readyButton then
			-- Fire readyButton remote
			local args = {[1] = true}
			readyButton:FireServer(unpack(args))
		else
			warn("readyButton not found in GAME_START")
		end
	else
		warn("GAME_START not found in ReplicatedStorage")
	end

	task.spawn(function()
		ReplayRemoteEvents(events)
		isReplaying = false -- Reset the flag after replay is done
		print("Replay finished.")

		-- Restart monitoring the replay button
		sizeHandled = false -- Reset the sizeHandled flag
		MonitorReplayButton()
	end)
end

local function MonitorReplayButton()
	replayButton = Player:WaitForChild("PlayerGui"):WaitForChild("GameEnded"):WaitForChild("Frame"):WaitForChild("replay")

	if connection then
		connection:Disconnect()
		connection = nil
	end

	connection = replayButton:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		if not sizeHandled and (replayButton.AbsoluteSize.X > initialSize.X or replayButton.AbsoluteSize.Y > initialSize.Y) then
			print("Replay button AbsoluteSize increased. Waiting 10 seconds before starting replay.")
			sizeHandled = true -- Mark size change as handled
			local startTime = tick()
			while tick() - startTime < 10 do
				wait(0.1)
			end
			if not isReplaying then
				StartReplay()
			end
		end
	end)
	print("Monitoring replay button for size changes.")
end

-- Initial replay start using a task scheduler to ensure it starts properly
task.defer(function()
	print("Initial replay start.")
	StartReplay()
end)

-- Start monitoring the replay button
MonitorReplayButton()

print("Replay script initialized and running.")
